#!/usr/bin/perl

# This file is part of runtest-utils.
#
# runtest-utils is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# runtest-utils is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with runtest-utls.  If not, see <https://www.gnu.org/licenses/>.

use warnings;
use strict;
no indirect;
no autovivification;

# Converted to a real package number by autotools.
my $VERSION_NUMBER = "~~PACKAGE-VERSION~~";

#========================================================================#

=pod

=head1 NAME

compare-tests - compare two summary files and highlight regressions

=head1 OPTIONS

B<compare-tests> [-h|--help] [--version]
                 [-q|--quiet] [-b|--bad-only]
                 [-c|--collapse-missing-scripts]
                 [-s|--summary]
                 [-t <TARGET>|--target=<TARGET>]
                 SUM-FILE-BEFORE SUM-FILE-AFTER

=head1 SYNOPSIS

Compare the test results in I<SUM-FILE-BEFORE> and I<SUM-FILE-AFTER> and
show tests that have changed status between the two.

With the I<--quiet> flag then no output is printed, but the script exit
value still indicates whether anything bad happened.

The flag I<--bad-only> hides all results relating to good test result
changes, the only thing printed are changes considered bad.

With the I<--collapse-missing-scripts> flag, if a script is entirely
missing then this is summarised with a single line, rather than listing all
the tests in the script as transitioning too or from the GONE status.

With the I<--summary> flag, a summary of the comparison is produced.
Instead of listing each test that has changed, just a summary list of the
number of changes of each type is given.  Only types of change for which
the count is 1 or more are listed.

When processing summary files with multiple targets in then the user must
select which targets to compare using the I<--target> option.  The value
passed to this option is a string, the name of a target.  If the script is
not passed this option and the summary files have multiple targets, then a
list of the available targets will be printed.

=head1 EXIT VALUE

The script exists with value 0 if there were no bad status transitions
between the two result sets.  That means at least all of the same tests run
(though running more is considered good), and no test regressed.  If
anything considered bad happened then the script returns value 1.

=cut

#========================================================================#

use FindBin;
use lib "$FindBin::Bin/lib";
use GiveHelp qw/usage/;         # Allow -h or --help command line options.
use RunTestUtils::SumFile;
use RunTestUtils::FilterManager;
use List::MoreUtils qw/uniq/;
use Getopt::Long;
use boolean;

my $SYSCONFDIR = "$FindBin::Bin/etc";
my $FILTERS_PATH = "$SYSCONFDIR/runtest-utils/filters/";

#========================================================================#

exit (main ());

#========================================================================#

=pod

=head1 METHODS

The following methods are defined in this script.

=over 4

=cut

#========================================================================#

=pod

=item B<find_target_name>

Take two RunTestUtils::SumFile objects and the name of a target which can
be undef, which should be a target passed by the user on the command line.

Returns the name of the target to compare the results for from the two
summary files.

If the user specified no target (undef passed as the target name) and the
summary files both contain a single target (which is the same target), then
the name of this target is returned.

If the user specified a target, return that target.

Otherwise, print the list of targets in both summary files, and
exit.

=cut

sub find_target_name {
  my $sumfile1 = shift;
  my $sumfile2 = shift;
  my $target = shift;

  if (defined $target)
  {
    return $target;
  }

  my @targets1 = $sumfile1->targets ();
  my @targets2 = $sumfile2->targets ();

  # If both summary files have one target, and it's the same target, then
  # we're using that.
  if ((scalar (@targets1) == 1) and (scalar (@targets2) == 1)
        and ($targets1[0] eq $targets2[0]))
  {
    return $targets1[0];
  }

  # Either we have multiple targets in each summary file, or we have one
  # target, but they are different.  In this case we want the user to tell
  # us which target to pick, print some diagnostic information and exit.
  print "Different, or multiple targets in each summary file.  Please select a target\n";
  print "using the --target=<TARGET> command line option.\n";
  print "\n";
  print "Targets from '".$sumfile1->filename ()."':\n";
  print "  ".join (", ", @targets1)."\n";
  print "Targets from '".$sumfile2->filename ()."':\n";
  print "  ".join (", ", @targets2)."\n";
  exit (1);
}

#========================================================================#

=pod

=item B<is_bad_transition>

Take a string that is a test status transition, for example "PASS -> FAIL",
and return true if the transition is a bad one (for example PASS to FAIL),
or false, if the transition is a good one (for example FAIL to PASS).

A transition where the status remains the same is never bad, so PASS to
PASS is not bad, nor is FAIL to FAIL.  A bad transition represents
something getting worse.

=cut

sub is_bad_transition {
  my $transition = shift;

  my ($from, $to) = split / -> /, $transition;
  (defined $from) and (defined $to) or
    die "Unable to parse transition '$transition'\n";

  # A '1' indicates a bad state, while '0' represents good.
  my %score = ("GONE" => 1,
               "UNRESOLVED" => 1,
               "UNTESTED" => 1,
               "FAIL" => 1,
               "UNSUPPORTED" => 1,
               "PASS" => 0,
               "XFAIL" => 0,
               "KFAIL" => 0,
               "XPASS" => 0,
               "KPASS" => 0);

  (exists ($score {$from})) or
    die "Unknown test state '$from'\n";
  (exists ($score {$to})) or
    die "Unknown test state '$to'\n";

  return (($from ne $to) and ($score{$to} > 0));
}

#========================================================================#

=pod

=item B<all_keys>

Take two hash references, return the sorted list of uniq keys from both
hash tables.

=cut

sub all_keys {
  my $hash_ref_a = shift;
  my $hash_ref_b = shift;

  my @keys = (keys (%{$hash_ref_a}), keys (%{$hash_ref_b}));
  @keys = uniq (sort (@keys));

  return @keys;
}

#========================================================================#

=pod

=item B<load_results>

Takes a RunTestUtils::SumFile object and a string, the name of a target
(from the summary file) and repacks the results from that summary file (for
the named target) into a hash table and returns a hash-reference.  The keys
of the hash are the test script names, and the values are themselves,
hash-references.

Each of these second level hash tables have keys that are the unique ID for
a test and the value is TestResult object.

=cut

sub load_results {
  my $summary_file = shift;
  my $target = shift;

  my @results = $summary_file->results ($target);
  my $result = {};
  foreach my $r (@results)
  {
    my $script = $r->get_path ();
    my $id = $r->get_id ();
    $result->{$script}->{$id} = $r;
  }

  return $result;
}

#========================================================================#

=pod

=item B<main>

Main method, takes no arguments, return exit status.

=cut

sub main {
  my $collapse = false;
  my $bad_only = false;
  my $quiet = false;
  my $show_version = false;
  my $summarise = false;
  my $target_name = undef;
  GetOptions ("version" => \$show_version,
              "bad-only|b" => \$bad_only,
              "quiet|q" => \$quiet,
              "collapse-missing-scripts|c" => \$collapse,
              "summary|s" => \$summarise,
              "target|t=s" => \$target_name);

  if ($show_version)
  {
    print "$FindBin::Script version $VERSION_NUMBER\n";
    exit (0);
  }

  my $filename1 = shift (@ARGV);
  my $filename2 = shift (@ARGV);

  (defined ($filename1)) or usage ();
  (defined ($filename2)) or usage ();

  RunTestUtils::FilterManager::load_filters ($FILTERS_PATH);
  my $sumfile1 = RunTestUtils::SumFile->parse ($filename1);
  my $sumfile2 = RunTestUtils::SumFile->parse ($filename2);

  my $target = find_target_name ($sumfile1, $sumfile2, $target_name);

  my $results1 = load_results ($sumfile1, $target);
  my $results2 = load_results ($sumfile2, $target);

  my @all_scripts = all_keys ($results1, $results2);

  my $summary = { __scripts_gone__ => [],
                  __scripts_appeared__ => [] };
  foreach my $script (@all_scripts)
  {
    if ($collapse)
    {
      if (not (exists ($results1->{$script})))
      {
        push @{$summary->{__scripts_appeared__}}, $script;
        next;
      }
      elsif (not (exists ($results2->{$script})))
      {
        push @{$summary->{__scripts_gone__}}, $script;
        next;
      }
    }

    my $rs1 = $results1->{$script};
    my $rs2 = $results2->{$script};
    (defined ($rs1)) or $rs1 = {};
    (defined ($rs2)) or $rs2 = {};

    my @all_ids = all_keys ($rs1, $rs2);
    foreach my $id (@all_ids)
    {
      my $from_status = "GONE";
      my $to_status = "GONE";
      my $from = $rs1->{$id};
      my $to = $rs2->{$id};

      $from_status = $from->get_status () if (defined ($from));
      $to_status = $to->get_status () if (defined ($to));

      if ($from_status ne $to_status)
      {
        my $key = $from_status." -> ".$to_status;
        $summary->{$key} = [] unless (exists ($summary->{$key}));
        my $r = (defined $from) ? $from : $to;
        push @{$summary->{$key}}, $r;
      }
    }
  }

  my $seen_bad = false;

  if (@{$summary->{__scripts_gone__}})
  {
    $seen_bad = true;
    if (not $quiet)
    {
      if ($summarise)
      {
        print "Test scripts gone [BAD] : ".
          scalar (@{$summary->{__scripts_gone__}})."\n";
      }
      else
      {
        print "* The following test scripts have disappeared completely:".
          "\t[BAD]\n";
        print "\t$_\n" foreach (@{$summary->{__scripts_gone__}});
      }
    }
  }

  if (@{$summary->{__scripts_appeared__}})
  {
    if ((not $quiet) and (not $bad_only))
    {
      if ($summarise)
      {
        print "New test scripts\t: "
          .scalar (@{$summary->{__scripts_appeared__}})."\n";
      }
      else
      {
        print "* The following test scripts are completely new:\n";
        print "\t$_\n" foreach (@{$summary->{__scripts_appeared__}});
      }
    }
  }

  foreach my $key (keys %{$summary})
  {
    next if ($key =~ m/^__/);

    my $is_bad = is_bad_transition ($key);
    $seen_bad = true if ($is_bad);

    next if (($quiet) or ($bad_only and (not $is_bad)));

    if ($summarise)
    {
      print "$key".($is_bad ? "\t[BAD]\t" : "\t\t").": ".
        (scalar (@{$summary->{$key}}))."\n";
    }
    else
    {
      print "* $key:".($is_bad ? "\t[BAD]" : "")."\n";
      foreach my $r (@{$summary->{$key}})
      {
        print "\t".$r->get_id ()."\n";
      }
    }
  }

  return $seen_bad ? 1 : 0;
}

#========================================================================#

=pod

=back

=cut
